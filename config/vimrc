" config ==============================
" :help 'opintion' for explaining
set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8,gbk,gb18030,gb2312
set fileencoding=utf-8
set fileformat=unix

set history=512
set wildmenu
set showcmd

set number
set ruler
set scrolloff=3
set hlsearch
set showmatch
set ignorecase
set smartcase

set nocompatible
set backspace=indent,eol,start
set autoindent
set smartindent
set cindent

set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
set laststatus=2

" Vertical bar in insert mode
let &t_SI = "\<Esc>]50;CursorShape=1\x7" " 
" Block in normal mode
let &t_EI = "\<Esc>]50;CursorShape=0\x7" " 
colorscheme desert
" 256 color
set t_Co=256
" turn off bell
set noeb

" set nobackup
" set nowritebackup
" set noswapfile
set autowriteall
set clipboard+=unnamed
set autoread

syntax on
filetype on
filetype plugin on
filetype indent on

" set tab for auto complete ====
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>
set completeopt=longest,menuone

" persional shortcuts ==========
let mapleader = ";"

" Fast saving
nmap <leader>w :w!<cr>
" :W sudo saves the file 
command W w !sudo tee % > /dev/null

vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

map 0 ^
map <silent> <leader><cr> :noh<cr>

" use Ctrl-key in insert mode for navigate
inoremap <C-h> <C-o>h
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-l> <C-o>l
inoremap <C-b> <C-o>b

" foldmethod
set foldmethod=indent   
" set foldnestmax=10
" set nofoldenable
" set foldlevel=2

" tools function ==============
function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
